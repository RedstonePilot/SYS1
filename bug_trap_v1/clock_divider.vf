////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : clock_divider.vf
// /___/   /\     Timestamp : 02/22/2024 09:40:28
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath C:/Users/pkq500/bug_trap_v1/virtual_wires -intstyle ise -family zynq -verilog C:/Users/pkq500/bug_trap_v1/clock_divider.vf -w C:/Users/pkq500/bug_trap_v1/Src/clock_divider.sch
//Design Name: clock_divider
//Device: zynq
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CB16CE_HXILINX_clock_divider(CEO, Q, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 16'b1111_1111_1111_1111;
   
   output             CEO;
   output [15:0]      Q;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg    [15:0]      Q;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 16'b0000_0000_0000_0000;
	else if (CE)
	  Q <= Q + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = (Q == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module clock_divider(CLK, 
                     CLR, 
                     CLK_OUT);

    input CLK;
    input CLR;
   output CLK_OUT;
   
   wire [15:0] CNT;
   wire XLXN_1;
   wire XLXN_5;
   
   (* HU_SET = "XLXI_3_0" *) 
   CB16CE_HXILINX_clock_divider  XLXI_3 (.C(CLK), 
                                        .CE(XLXN_5), 
                                        .CLR(CLR), 
                                        .CEO(XLXN_1), 
                                        .Q(), 
                                        .TC());
   (* HU_SET = "XLXI_4_1" *) 
   CB16CE_HXILINX_clock_divider  XLXI_4 (.C(CLK), 
                                        .CE(XLXN_1), 
                                        .CLR(CLR), 
                                        .CEO(), 
                                        .Q(CNT[15:0]), 
                                        .TC());
   BUF  XLXI_7 (.I(CNT[6]), 
               .O(CLK_OUT));
   VCC  XLXI_11 (.P(XLXN_5));
endmodule
